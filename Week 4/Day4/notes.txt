unordered_map: hash table based data container
map : trees based(usually self-balancing)
unordered_set: hash table
set: red-black tree
multimap:used when multiple values have to be stored with same key attached to them 
multiset:same as multi map. It gives a sorted storage of elements

// mini project- make apache server / web server using modern c++

// mini project - make own malloc function



Data: representing employee Ids for various employees
  e1                e2              e3              e4                 e5
[ 101 | Harshit ] [202 | Rohan ] [ 103 | Ajay ] [ 204 | Mehul ] [ 105 | Mayank ]
 

option 1:array
fixed size container,memory has to be reserved before adding elements. size cannot be changed.storage contiguous.elements can be accessed via index.constant time add,remove,read,update using index 

option 2:vector
we can increase the number of elements at any point .storage is contiguous.if there is no space available adjacent to current memory allocated, all elements will be shifted.adding elements at the end of vector, accessing an element for read,updating can all be performed via index position in constant time.memory can be reserved in advance in some implementation like STL.

option 3: linked list
data will not be stored contiguously.
for each new element to be added, a new node of data is created by allocationg memory.
since memory is not supposed to be contigous, works well for large number of items.
operations have different time complexity.

option 4: hash table with key value pairs,only one value per key.
hashing based on hash functions applied on keys determines bucket to store the value.
amortized cost of operations

option 4b: hash table with key value pairs,multiple value per key (unordered multimap)
-one key may be associated with multiple values 
-amortized cost of operations

option 5: set with a custom comparison logic created via comparator
duplicates will not be allowed
duplicates is determined using equivalence principle 

option 6: data in a stack based on some type of container (std::stack)
only one element will be available for operation (LIFO order)
underlying implementation can be decided.


// AVOID DISTRACTIONS 

